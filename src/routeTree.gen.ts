/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VersionsRouteImport } from './routes/versions'
import { Route as ServersRouteImport } from './routes/servers'
import { Route as NewsRouteImport } from './routes/news'
import { Route as InstallationsRouteImport } from './routes/installations'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InstallModsIdRouteImport } from './routes/install-mods/$id'

const VersionsRoute = VersionsRouteImport.update({
  id: '/versions',
  path: '/versions',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersRoute = ServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => rootRouteImport,
} as any)
const NewsRoute = NewsRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => rootRouteImport,
} as any)
const InstallationsRoute = InstallationsRouteImport.update({
  id: '/installations',
  path: '/installations',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InstallModsIdRoute = InstallModsIdRouteImport.update({
  id: '/install-mods/$id',
  path: '/install-mods/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/installations': typeof InstallationsRoute
  '/news': typeof NewsRoute
  '/servers': typeof ServersRoute
  '/versions': typeof VersionsRoute
  '/install-mods/$id': typeof InstallModsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/installations': typeof InstallationsRoute
  '/news': typeof NewsRoute
  '/servers': typeof ServersRoute
  '/versions': typeof VersionsRoute
  '/install-mods/$id': typeof InstallModsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/installations': typeof InstallationsRoute
  '/news': typeof NewsRoute
  '/servers': typeof ServersRoute
  '/versions': typeof VersionsRoute
  '/install-mods/$id': typeof InstallModsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/installations'
    | '/news'
    | '/servers'
    | '/versions'
    | '/install-mods/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/installations'
    | '/news'
    | '/servers'
    | '/versions'
    | '/install-mods/$id'
  id:
    | '__root__'
    | '/'
    | '/installations'
    | '/news'
    | '/servers'
    | '/versions'
    | '/install-mods/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InstallationsRoute: typeof InstallationsRoute
  NewsRoute: typeof NewsRoute
  ServersRoute: typeof ServersRoute
  VersionsRoute: typeof VersionsRoute
  InstallModsIdRoute: typeof InstallModsIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/versions': {
      id: '/versions'
      path: '/versions'
      fullPath: '/versions'
      preLoaderRoute: typeof VersionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers': {
      id: '/servers'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof ServersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news': {
      id: '/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/installations': {
      id: '/installations'
      path: '/installations'
      fullPath: '/installations'
      preLoaderRoute: typeof InstallationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/install-mods/$id': {
      id: '/install-mods/$id'
      path: '/install-mods/$id'
      fullPath: '/install-mods/$id'
      preLoaderRoute: typeof InstallModsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InstallationsRoute: InstallationsRoute,
  NewsRoute: NewsRoute,
  ServersRoute: ServersRoute,
  VersionsRoute: VersionsRoute,
  InstallModsIdRoute: InstallModsIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
