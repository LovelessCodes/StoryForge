name: Check PR Tauri version

on:
  pull_request:
    branches:
      - release
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  get_pr_version:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read # Needed to checkout the PR branch

    outputs:
      tauri_version: ${{ steps.parse_json.outputs.version }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Read tauri.conf.json and extract version
        id: parse_json
        run: |
          TAURI_CONFIG_PATH="./src-tauri/tauri.conf.json"

          if [ ! -f "$TAURI_CONFIG_PATH" ]; then
            echo "Error: $TAURI_CONFIG_PATH not found in the PR branch."
            exit 1
          fi

          # Use 'jq' to parse the JSON and extract the 'version' field
          # 'jq -r' outputs raw string
          version=$(jq -r '.version' "$TAURI_CONFIG_PATH")

          if [ -z "$version" ]; then
            echo "Error: 'version' field not found in $TAURI_CONFIG_PATH."
            exit 1
          fi

          echo "Tauri version from PR: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

  check_version:
    needs: get_pr_version
    runs-on: ubuntu-latest
    steps:
      - name: Check release tag via API
        id: curl_check
        env:
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.get_pr_version.outputs.tauri_version }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GH_REPO}/releases/tags/${TAG}")
          if [ "$code" = "200" ]; then
            echo "Release with tag '${TAG}' already exists."
            exit 1
          elif [ "$code" = "404" ]; then
            echo "No existing release with tag '${TAG}'."
            exit 0
          else
            echo "Unexpected status: $code"
            exit 2
          fi