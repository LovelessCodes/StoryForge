name: Check PR Tauri version

on:
  pull_request:
    branches:
      - main # or your default branch
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  get_pr_version:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read # Needed to checkout the PR branch

    outputs:
      tauri_version: ${{ steps.parse_json.outputs.version }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Read tauri.conf.json and extract version
        id: parse_json
        run: |
          TAURI_CONFIG_PATH="./src-tauri/tauri.conf.json"

          if [ ! -f "$TAURI_CONFIG_PATH" ]; then
            echo "Error: $TAURI_CONFIG_PATH not found in the PR branch."
            exit 1
          fi

          # Use 'jq' to parse the JSON and extract the 'version' field
          # 'jq -r' outputs raw string
          version=$(jq -r '.package.version' "$TAURI_CONFIG_PATH")

          if [ -z "$version" ]; then
            echo "Error: 'version' field not found in 'package' object within $TAURI_CONFIG_PATH."
            exit 1
          fi

          echo "Tauri version from PR: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

  # Example of how to use the extracted version in a subsequent job
  check_version:
    needs: get_pr_version
    runs-on: ubuntu-latest
    steps:
      - name: Check if release tag exists
        id: check_release
        uses: octokit/request-action@v2.1.2
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/{tag}
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          tag: ${{ needs.get_pr_version.outputs.tauri_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Fail if release exists
        if: steps.check_release.outcome == 'success'
        run: |
          echo "A release with tag '${{ needs.get_pr_version.outputs.tauri_version }}' already exists."
          exit 1

      - name: OK if not found (404)
        if: steps.check_release.outcome != 'success'
        run: |
          echo "No existing release with tag '${{ needs.get_pr_version.outputs.tauri_version }}'. Proceeding."